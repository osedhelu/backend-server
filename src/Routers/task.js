const express = require("express");
const Task = require("../models/task");
const routerTask = new express.Router();	

/////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////  TASK /////////////////////////////////////////////
//////////////////////////////////////////// TASK /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////



routerTask.get("/task/:id", (req,resp)=>{
	const _id = req.params.id;
	Task.findById(_id).then((task) => {
	  if(!task){
	  	return resp.status(400).send();
	  }
	  resp.send(task)

	}).catch((err) => {
	  resp.status(500).send(err);
	})
});
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////


routerTask.post("/task",(req, resp)=>{
	const task = new Task(req.body);
	task.save()
	.then(() => {
	  resp.send(task)
	})
	.catch((err) => {
	  resp.status(400).send(err);
	});
});
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

routerTask.get("/task", (req, resp)=>{
	Task.find({})
	.then((tasks) => {
	  resp.status(201).send(tasks);
	})
	.catch((err) => {
	  resp.status(400).send(err);
	});
});
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////

routerTask.patch("/task/:id", async(req,resp)=>{
	const update = Object.keys(req.body);
	const allowedUpdate = ["description", "completed"];
	const isValidOperation = update.every((update) => allowedUpdate.includes(update));
	

	if(!isValidOperation){
		return resp.status(400).send({error: "Invalid Update"});
	}
	try{
		// const task = await Task.findByIdAndUpdate(req.params.id, req.body,{new:true, runValidators:true});
		const task = await Task.findById(req.params.id);
		update.forEach((update)=>task[update] = req.body[update]);
		await task.save();

		if(!task){
			return resp.status(400).send();
		}
		resp.send(task);
	}catch(e){
		resp.status(400).send(e);
	}

});

routerTask.delete("/task/:id", async(req,resp) => {
	try{
		const task = await Task.findByIdAndDelete(req.params.id);
		if(!task){
			return resp.status(400).send();
		}
		resp.send(task);
	}catch(e){
			resp.status(500).send(e)
	}
});
/////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////
module.exports= {
	routerTask
}